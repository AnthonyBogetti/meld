#!/usr/bin/env python
# encoding: utf-8

import argparse
from meld import vault
from matplotlib import pyplot
import numpy as np


def parse_args():
    parser = argparse.ArgumentParser(
        description='Analyze the results of replica exchange.')

    parser.add_argument('--start', type=int, default=None,
                        help='first frame to extract (default: first')
    parser.add_argument('--end', type=int, default=None,
                        help='last frame to extract (default: last)')
    subparsers = parser.add_subparsers(dest='command')

    subparsers.add_parser('visualize_alpha', help='visualize the value of alpha')

    extract_alpha = subparsers.add_parser('extract_alpha', help='extract alpha values')
    extract_alpha.add_argument('outfile', help='output filename')

    visualize_trace = subparsers.add_parser('visualize_trace', help='visualize trace of replica through ladder')
    visualize_trace.add_argument('--replicas', nargs='+', type=int, default=None,
                                 help='replicas to visualize')

    extract_trace = subparsers.add_parser('extract_trace', help='extract trace')
    extract_trace.add_argument('outfile', help='output filename')

    subparsers.add_parser('visualize_fup', help='visualize the value of f_up')

    return parser.parse_args()


def main():
    args = parse_args()

    store = vault.DataStore.load_data_store()
    store.initialize(mode='safe')

    if args.command == 'visualize_alpha':
        visualize_alpha(store, args)
    elif args.command == 'extract_alpha':
        extract_alpha(store, args)
    elif args.command == 'visualize_trace':
        visualize_trace(store, args)
    elif args.command == 'extract_trace':
        extract_trace(store, args)
    elif args.command == 'visualize_fup':
        visualize_fup(store, args)


def visualize_alpha(store, args):
    alphas = get_alphas(store, args.start, args.end)
    n_reps = alphas.shape[0]
    for i in range(n_reps):
        pyplot.plot(alphas[i, :], 'k-')
    pyplot.show()


def extract_alpha(store, args):
    alphas = get_alphas(store, args.start, args.end)
    np.savetxt(args.outfile, alphas)


def visualize_trace(store, args):
    perm_vecs = get_permutation_vectors(store, args.start, args.end)
    traces = deshuffle_traces(perm_vecs)

    n_replicas = traces.shape[1]

    if args.replicas is None:
        reps = range(n_replicas)
    else:
        reps = args.replicas

    for index in reps:
        pyplot.plot(traces[:, index])

    pyplot.show()


def extract_trace(store, args):
    perm_vecs = get_permutation_vectors(store, args.start, args.end)
    traces = deshuffle_traces(perm_vecs)
    np.savetxt(args.outfile, traces)


def visualize_fup(store, args):
    perm_vecs = get_permutation_vectors(store, args.start, args.end)
    traces = deshuffle_traces(perm_vecs)
    f_up = compute_fup(traces)
    pyplot.plot(f_up)
    pyplot.show()


def get_alphas(store, start, end):
    alphas = store.load_all_alphas()
    n_alphas = alphas.shape[1]
    if start is None:
        start = 1
    if end is None:
        end = n_alphas - 1

    assert start > 0 and start < n_alphas
    assert end > 0 and end < n_alphas
    assert end > start

    return alphas[:, start:(end + 1)]


def get_permutation_vectors(store, start, end):
    alphas = store.load_all_permutation_vectors()
    n_alphas = alphas.shape[1]
    if start is None:
        start = 1
    if end is None:
        end = n_alphas - 1

    assert start > 0 and start < n_alphas
    assert end > 0 and end < n_alphas
    assert end > start

    return alphas[:, start:(end + 1)]


def deshuffle_traces(perm_vecs):
    n_replicas = perm_vecs.shape[0]
    n_steps = perm_vecs.shape[1]

    results = []
    current_indices = np.array(list(range(n_replicas)))

    for i in range(n_steps):
        current_indices = current_indices[perm_vecs[:, i]]
        results.append(current_indices)
    return np.array(results)


def compute_fup(traces):
    # these are indexed by LADDER STEP
    up_count = np.zeros_like(traces[0, :])
    down_count = np.zeros_like(traces[0, :])
    # these are indexed by REPLICA
    going_up = np.zeros_like(traces[0, :])
    going_down = np.zeros_like(traces[0, :])

    n_steps = traces.shape[0]
    n_reps = traces.shape[1]

    for step in range(n_steps):
        # this gives the REPLICA for each LADDER STEP
        this_trace = traces[step, :]

        # these are the top and bottom REPLICAS
        top = np.where(this_trace == (n_reps - 1))[0]
        bottom = np.where(this_trace == 0)[0]

        # update if each replica is going up or down
        going_up[top] = 0
        going_down[top] = 1
        going_up[bottom] = 1
        going_down[bottom] = 0

        up_count += going_up[this_trace]
        down_count += going_down[this_trace]

    return up_count / (up_count + down_count + 0.1)


if __name__ == '__main__':
    main()
