#!/usr/bin/env python
# encoding: utf-8

import argparse
from meld import vault
from matplotlib import pyplot
import numpy as np


def parse_args():
    parser = argparse.ArgumentParser(
        description='Analyze the results of replica exchange.')

    parser.add_argument('--start', type=int, default=None,
                        help='first frame to extract (default: first')
    parser.add_argument('--end', type=int, default=None,
                        help='last frame to extract (default: last)')
    subparsers = parser.add_subparsers(dest='command')

    vis_energy = subparsers.add_parser('visualize_energy', help='visualize the value of alpha')
    vis_energy.add_argument('--replica', type=int, default=None, nargs='+',
                            help='replica to analyze energy for')

    return parser.parse_args()


def main():
    args = parse_args()

    store = vault.DataStore.load_data_store()
    store.initialize(mode='safe')

    if args.command == 'visualize_energy':
        visualize_energy(store, args)


def visualize_energy(store, args):
    alphas = get_energy(store, args.start, args.end)
    n_reps = alphas.shape[0]
    if args.replica is None:
        replicas = range(n_reps)
    else:
        replicas = args.replica
    for rep in replicas:
        pyplot.plot(alphas[rep, :])
    pyplot.show()


def extract_energy(store, args):
    alphas = get_energy(store, args.start, args.end)
    np.savetxt(args.outfile, alphas)


def get_energy(store, start, end):
    energies = store.load_all_energies()
    n_energies = energies.shape[1]
    if start is None:
        start = 1
    if end is None:
        end = n_energies - 1

    assert 0 < start < n_energies
    assert 0 < end < n_energies
    assert end > start

    return energies[:, start:(end + 1)]


if __name__ == '__main__':
    main()
