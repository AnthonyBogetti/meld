#!/usr/bin/env python
# encoding: utf-8

import argparse
from meld import vault
from matplotlib import pyplot
import numpy as np


def parse_args():
    parser = argparse.ArgumentParser(
        description='Analyze the results of replica exchange.')

    parser.add_argument('--start', type=int, default=None,
                        help='first frame to extract (default: first')
    parser.add_argument('--end', type=int, default=None,
                        help='last frame to extract (default: last)')
    subparsers = parser.add_subparsers(dest='command')

    vis_energy = subparsers.add_parser('visualize_energy', help='visualize the energy')
    vis_energy.add_argument('--index', type=int, default=None, nargs='+',
                            help='ladder index to analyze energy for')

    vis_delta = subparsers.add_parser('visualize_delta', help='visualize the energy difference between replicas')
    vis_delta.add_argument('--index', type=int, default=None, nargs='+',
                            help='ladder index to analyze delta for')

    vis_energy_column = subparsers.add_parser('visualize_column', help='visualize a column of the energy matrix')
    vis_energy_column.add_argument('--index', type=int, default=0,
                                   help='column index to analyze the energies for')

    return parser.parse_args()


def main():
    args = parse_args()

    store = vault.DataStore.load_data_store()
    store.initialize(mode='safe')

    if args.command == 'visualize_energy':
        visualize_energy(store, args)
    if args.command == 'visualize_delta':
        visualize_delta(store, args)
    if args.command == 'visualize_column':
        visualize_energy_column(store, args)


def visualize_energy(store, args):
    energies = get_energy(store, args.start, args.end)
    n_reps = energies.shape[0]
    if args.index is None:
        replicas = range(n_reps)
    else:
        replicas = args.index
    for rep in replicas:
        pyplot.plot(energies[rep, :])
    pyplot.show()


def visualize_delta(store, args):
    energy_matrix = get_matrix(store, args.start, args.end)
    n_reps = energy_matrix.shape[0]
    if args.index is None:
        replicas = range(n_reps - 1)
    else:
        replicas = args.index

    for i in replicas:
        j = i + 1
        delta = energy_matrix[i, i, :] + energy_matrix[j, j] - energy_matrix[i, j] - energy_matrix[j, i]
        pyplot.plot(delta)
    pyplot.show()


def visualize_energy_column(store, args):
    energy_matrix = get_matrix(store, args.start, args.end)
    n_replicas = energy_matrix.shape[0]
    for i in range(n_replicas):
        pyplot.plot(energy_matrix[i, args.index, :])
    pyplot.show()


def get_energy(store, start, end):
    energies = store.load_all_energies()
    n_energies = energies.shape[1]
    if start is None:
        start = 1
    if end is None:
        end = n_energies - 1

    assert 0 < start < n_energies
    assert 0 < end < n_energies
    assert end > start

    return energies[:, start:(end + 1)]


def get_matrix(store, start, end):
    matrix = store.load_all_energy_matrices()
    n_steps = matrix.shape[2]
    if start is None:
        start = 1
    if end is None:
        end = n_steps - 1

    assert 0 < start < n_steps
    assert 0 < end < n_steps
    assert end > start

    return matrix[:, :, start:(end + 1)]


if __name__ == '__main__':
    main()
